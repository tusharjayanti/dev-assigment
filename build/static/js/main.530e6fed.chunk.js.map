{"version":3,"sources":["Components/Trends.js","App.js","serviceWorker.js","index.js"],"names":["pp","smooth","autoDraw","autoDrawDuration","autoDrawEasing","data","gradient","radius","strokeWidth","strokeLinecap","App","props","state","aj_app_trend","aj_coh_trend","aj_app_sum","aj_coh_sum","axios","get","response","td","td1","console","log","forEach","e","push","row1Sum","this","row2Sum","app_t","coh_t","i","length","temp1","temp2","element","setState","getTrendsData","columns","Header","accessor","maxWidth","Cell","cellInfo","width","height","headerHeight","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0XAqBeA,MAjBf,WACE,OACE,kBAAC,IAAD,CACAC,QAAM,EACNC,UAAQ,EACRC,iBAAkB,IAClBC,eAAe,WAEfC,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACtGC,SAAU,CAAC,WACXC,OAAQ,EACRC,YAAa,IACbC,cAAe,YCiHJC,E,kDAxHb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAEDC,MAAQ,CAEXP,KAAK,GACLQ,aAAc,GACdC,aAAc,GACdC,WAAY,EACZC,WAAY,GATE,E,oMAgBJ,6G,SACWC,IAAMC,IADjB,8G,OA2BZ,IA1BMC,E,OACFC,EAAKD,EAASd,KAAT,KAILgB,EAAK,GACTC,QAAQC,IAAIH,EAAG,GAAH,OACZD,EAASd,KAAT,KAAsBmB,SAAQ,SAAAC,GAK5BJ,EAAIK,KAAKD,EAAC,OAAD,sBASXH,QAAQC,IAAIF,GACRM,EAAUC,KAAKhB,MAAMG,WACrBc,EAAUD,KAAKhB,MAAMI,WACrBc,EAAQ,GACRC,EAAQ,GACJC,EAAE,EAAEA,EAAEZ,EAAGa,OAAOD,IAElBE,EAAQ,GACRC,EAAQ,GACZf,EAAGY,GAAH,MAAeR,SAAQ,SAAAY,GACnBT,GAAWS,EAAO,oBAClBF,EAAMR,KAAKU,EAAO,qBAClBP,GAAWO,EAAO,+BAClBD,EAAMT,KAAKU,EAAO,mCAEtBN,EAAMJ,KAAKQ,GACXH,EAAML,KAAKS,GAKbP,KAAKS,SAAS,CACQhC,KAAMgB,EACNR,aAAeiB,EACff,WAAYY,EACZb,aAAeiB,EACff,WAAYa,IAMhBP,QAAQC,IAAIO,EAAM,I,iJAKhCF,KAAKU,kB,+BAID,IAAD,OAEDC,EAAU,CAAC,CACfC,OAAQ,gBAERC,SAAW,OACXC,SAAU,KAEV,CACAF,OAAO,kBAAM,0DAA+B,6BAAM,EAAK5B,MAAMG,aAC7D0B,SAAU,4BACVE,KAAM,SAAAC,GAAQ,OAAI,kBAAC,EAAD,CAAOC,MAAO,IAAKC,OAAQ,OAC7CJ,SAAU,KAEV,CACDF,OAAO,kBAAM,qEAA0C,6BAAM,EAAK5B,MAAMI,aACxEyB,SAAU,MACVE,KAAM,SAAAC,GAAQ,OAAI,kBAAC,EAAD,CAAOC,MAAO,IAAKC,OAAQ,OAC5CJ,SAAU,MAIZ,OACI,6BACE,kBAAC,IAAD,CACJrC,KAAMuB,KAAKhB,MAAMP,KACjBkC,QAASA,EACTQ,aAAc,W,GA7GFC,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,c","file":"static/js/main.530e6fed.chunk.js","sourcesContent":["import React from 'react';\nimport Trend from 'react-trend';\n\n\nfunction pp() {\n  return (\n    <Trend\n    smooth\n    autoDraw\n    autoDrawDuration={3000}\n    autoDrawEasing=\"ease-out\"\n    // data={[0,2,5,9,5,10,3,5,0,0,1,8,2,9,0]}\n    data={[178, 166, 153, 162, 185, 192, 187, 153, 154, 128, 159, 160, 186, 180, 167, 155, 148, 156, 178, 207]}\n    gradient={['#42b3f4']}\n    radius={0}\n    strokeWidth={4.4}\n    strokeLinecap={'square'}\n  />\n  );\n}\n\nexport default pp;\n","import React from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport ReactTable from \"react-table\"; \nimport 'react-table/react-table.css'\nimport Trend from './Components/Trends'\nclass App extends React.Component{\n  \n\n  constructor(props){\n    super(props);\n    \n    this.state = {\n\n      data:[],\n      aj_app_trend: [],\n      aj_coh_trend: [],\n      aj_app_sum: 0,\n      aj_coh_sum: 0,\n\n    }\n  \n  }\n\n  async getTrendsData(){\n    const URL = 'https://clarisights-users.s3.eu-central-1.amazonaws.com/frontend-assignment/1000+items+table+response.json';\n    const response = await axios.get(URL)\n    let td = response.data['data'];\n    // console.log(td[0]['groups']['Campaign']['metadata'])\n    // // console.log(td[0])\n    // let obj = {}\n    let td1 =[]\n    console.log(td[0]['trend'])\n    response.data['data'].forEach(e => {\n      // obj = {\n      //    'name':e['groups']['Campaign']['metadata']['name'],\n            // 'aj_coh_trend':\n      // }\n      td1.push(e['groups']['Campaign']['metadata'])\n      // e.['trend'].forEach\n      // obj = {\n      //    'name':e['groups']['Campaign']['metadata']['name'],\n            // 'aj_coh_trend':\n      // }\n\n    });\n\n    console.log(td1)\n    var row1Sum = this.state.aj_app_sum;\n    var row2Sum = this.state.aj_coh_sum;\n    var app_t = [];                   // array to hold all values of  trend 'aj_app_and_installs'\n    var coh_t = []                    // array to hold all values of  trend 'aj_coh_0w_and_real_acquisition'\n    for(let i=0;i<td.length;i++)\n    {   \n      var temp1 = []                  // temp array to hold values of 'aj_app_and_installs' in a single object\n      var temp2 = []                  // temp array to hold values of 'aj_coh_0w_and_real_acquisition' in a single object\n      td[i]['trend'].forEach(element => {\n          row1Sum += element['aj_app_and_installs']                // calculating global sum of 'aj_app_and_installs'\n          temp1.push(element['aj_app_and_installs'])\n          row2Sum += element['aj_coh_0w_and_real_acquisition']    // calculating global sum of 'aj_coh_0w_and_real_acquisition'\n          temp2.push(element['aj_coh_0w_and_real_acquisition'])\n      });\n      app_t.push(temp1)\n      coh_t.push(temp2)\n    }\n    \n\n   \n    this.setState({\n                          data: td1,\n                          aj_app_trend : app_t,\n                          aj_app_sum: row1Sum,\n                          aj_coh_trend : coh_t,\n                          aj_coh_sum: row2Sum,\n                          \n              \n                      });\n                      // console.log(app_t)\n                      // console.log(coh_t)\n                      console.log(app_t[0])\n  }\n \ncomponentDidMount(){\n  \n        this.getTrendsData();    \n\n      } \n\n  render() {\n\n    const columns = [{  \n      Header: 'Campaign_Name',  \n      // accessor: 'groups.Campaign.metadata.name',\n      accessor : 'name',\n      maxWidth: 500\n     }\n     ,{  \n      Header:() => <div>aj_app_and_installs_Trends<br/>{this.state.aj_app_sum}</div>,  \n      accessor: 'trend.aj_app_and_installs' ,\n      Cell: cellInfo => <Trend width={200} height={200} />,\n      maxWidth: 350\n      }\n     ,{\n     Header:() => <div>aj_coh_0w_and_real_acquisition_Trends<br/>{this.state.aj_coh_sum}</div>,\n     accessor: 'Tre' ,\n     Cell: cellInfo => <Trend width={200} height={200} />,\n      maxWidth: 350\n     }\n  ]\n    \n    return (\n        <div>\n          <ReactTable  \n      data={this.state.data}  \n      columns={columns}  \n      headerHeight={500}\n      />\n        </div>\n         \n\n     \n    )\n  }\n  \n  }\n\n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}